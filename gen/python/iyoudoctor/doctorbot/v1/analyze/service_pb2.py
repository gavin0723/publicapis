#encoding=utf8
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: service.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from vendor.google.api import annotations_pb2 as vendor_dot_google_dot_api_dot_annotations__pb2
import service_message_pb2 as service__message__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='service.proto',
  package='iyoudoctor.doctorbot.v1.analyze',
  syntax='proto3',
  serialized_pb=_b('\n\rservice.proto\x12\x1fiyoudoctor.doctorbot.v1.analyze\x1a#vendor/google/api/annotations.proto\x1a\x15service_message.proto2\xb9\x01\n\x0e\x41nalyzeService\x12\xa6\x01\n\x0bUserAnalyze\x12\x33.iyoudoctor.doctorbot.v1.analyze.UserAnalyzeRequest\x1a\x34.iyoudoctor.doctorbot.v1.analyze.UserAnalyzeResponse\",\x82\xd3\xe4\x93\x02&\"!/doctorbot/v1/analyze/useranalyze:\x01*BB\n#com.iyoudoctor.doctorbot.v1.analyzeB\rServicesProtoP\x01Z\x07\x61nalyze\x88\x01\x01\x62\x06proto3')
  ,
  dependencies=[vendor_dot_google_dot_api_dot_annotations__pb2.DESCRIPTOR,service__message__pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)





DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n#com.iyoudoctor.doctorbot.v1.analyzeB\rServicesProtoP\001Z\007analyze\210\001\001'))
import grpc
from grpc.beta import implementations as beta_implementations
from grpc.beta import interfaces as beta_interfaces
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities


class AnalyzeServiceStub(object):
  """{LANG: en} The analyze service
  {LANG: cn} 分析服务
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.UserAnalyze = channel.unary_unary(
        '/iyoudoctor.doctorbot.v1.analyze.AnalyzeService/UserAnalyze',
        request_serializer=service__message__pb2.UserAnalyzeRequest.SerializeToString,
        response_deserializer=service__message__pb2.UserAnalyzeResponse.FromString,
        )


class AnalyzeServiceServicer(object):
  """{LANG: en} The analyze service
  {LANG: cn} 分析服务
  """

  def UserAnalyze(self, request, context):
    """{LANG: en} Do user analyze
    {LANG: cn} 分析用户状况
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_AnalyzeServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'UserAnalyze': grpc.unary_unary_rpc_method_handler(
          servicer.UserAnalyze,
          request_deserializer=service__message__pb2.UserAnalyzeRequest.FromString,
          response_serializer=service__message__pb2.UserAnalyzeResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'iyoudoctor.doctorbot.v1.analyze.AnalyzeService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaAnalyzeServiceServicer(object):
  """{LANG: en} The analyze service
  {LANG: cn} 分析服务
  """
  def UserAnalyze(self, request, context):
    """{LANG: en} Do user analyze
    {LANG: cn} 分析用户状况
    """
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaAnalyzeServiceStub(object):
  """{LANG: en} The analyze service
  {LANG: cn} 分析服务
  """
  def UserAnalyze(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    """{LANG: en} Do user analyze
    {LANG: cn} 分析用户状况
    """
    raise NotImplementedError()
  UserAnalyze.future = None


def beta_create_AnalyzeService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  request_deserializers = {
    ('iyoudoctor.doctorbot.v1.analyze.AnalyzeService', 'UserAnalyze'): service__message__pb2.UserAnalyzeRequest.FromString,
  }
  response_serializers = {
    ('iyoudoctor.doctorbot.v1.analyze.AnalyzeService', 'UserAnalyze'): service__message__pb2.UserAnalyzeResponse.SerializeToString,
  }
  method_implementations = {
    ('iyoudoctor.doctorbot.v1.analyze.AnalyzeService', 'UserAnalyze'): face_utilities.unary_unary_inline(servicer.UserAnalyze),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_AnalyzeService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  request_serializers = {
    ('iyoudoctor.doctorbot.v1.analyze.AnalyzeService', 'UserAnalyze'): service__message__pb2.UserAnalyzeRequest.SerializeToString,
  }
  response_deserializers = {
    ('iyoudoctor.doctorbot.v1.analyze.AnalyzeService', 'UserAnalyze'): service__message__pb2.UserAnalyzeResponse.FromString,
  }
  cardinalities = {
    'UserAnalyze': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'iyoudoctor.doctorbot.v1.analyze.AnalyzeService', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
